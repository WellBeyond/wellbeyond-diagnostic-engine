{"version":3,"file":"wellbeyond-diagnostic-engine.esm.js","sources":["../src/index.ts"],"sourcesContent":["// @ts-ignore\nimport { Engine, Rule, Fact, Almanac, RuleResult, Event } from 'json-rules-engine';\nimport {Diagnostic, Solution, Symptom, PotentialSolution, PotentialRootCause} from \"./types\";\n\nexport type DiagnosticCallback = {\n    (diagnostic:Diagnostic): Promise<string|number>;\n}\n\nexport type SolutionCallback = {\n    (solution:Solution): Promise<string>;\n}\n\nclass DiagnosticEngine {\n    private readonly engine: Engine;\n    private symptoms: Symptom[] = [];\n    private solutions: {\n        [solutionId:string]: Solution\n    } = {};\n    private diagnostics: {\n        [diagnosticId:string]: Diagnostic\n    } = {};\n    private factCreated: {\n        [diagnosticId:string]: boolean\n    } = {};\n    private rules: Rule[] = [];\n    private diagnosticCallback?:DiagnosticCallback;\n    private solutionCallback?:SolutionCallback;\n    private factPriority:number = 1000;\n    public initialized = false;\n\n    public constructor () {\n        this.engine = new Engine([], {allowUndefinedFacts: false});\n    }\n\n    public initialize (symptoms:Symptom[], solutions:Solution[], diagnostics:Diagnostic[],\n                        diagnosticCallback:DiagnosticCallback, solutionCallback:SolutionCallback): DiagnosticEngine {\n        this.symptoms = symptoms || [];\n        solutions.forEach((solution) => {\n            this.solutions[solution.id] = solution;\n        });\n        diagnostics.forEach((diagnostic) => {\n            this.diagnostics[diagnostic.id] = diagnostic;\n        });\n        this.diagnosticCallback = diagnosticCallback;\n        this.solutionCallback = solutionCallback;\n        this.parse();\n        this.initialized = true;\n        return this;\n    }\n\n    public async run(symptoms:string[], systemTypes:string[]): Promise<void> {\n        this.engine.addFact('symptoms', symptoms);\n        this.engine.addFact('systemTypes', systemTypes);\n\n        this.engine\n            .on('success', event => {\n                console.log('success', event)\n            })\n            .on('failure', event => {\n                console.log('failure', event)\n            });\n\n        try {\n            await this.engine.run();\n        }\n        catch (e) {\n            console.log(e);\n        }\n\n    }\n\n    private parse ():void {\n        const self = this;\n        self.engine.addOperator('containsOneOf', (factValue:string[], jsonValue:string[]) => {\n            if (!factValue || !factValue.length) return false;\n            if (!jsonValue || !jsonValue.length) return false;\n            let contains:boolean = false;\n            jsonValue.forEach(val => {\n                if (factValue.includes(val)) contains = true;\n            });\n            return contains;\n        })\n        self.symptoms.forEach((symptom) => {\n            symptom.rules && symptom.rules.forEach((potential) => {\n                const solution = this.solutions[potential.solutionId];\n                if (solution) {\n                    const rule = this.createRuleForSolution(symptom, potential, solution);\n                    this.rules.push(rule);\n                }\n            });\n            symptom.rootCauses && symptom.rootCauses.forEach((cause) => {\n                const root = this.symptoms.find(s => s.id === cause.symptomId);\n                if (root) {\n                    const rule = this.createRuleForRootCause(symptom, cause, root);\n                    this.rules.push(rule);\n                }\n            });\n        });\n        self.addRules(self.rules);\n    }\n\n    private createFact(factId:string) {\n        const self = this;\n        if (factId && !self.factCreated[factId]) {\n            self.factCreated[factId] = true;\n            // @ts-ignore\n            this.engine.addFact(factId, function (params, almanac) {\n                return new Promise<any>((resolve, reject) => {\n                    const diagnostic = self.diagnostics[factId];\n                    if (diagnostic && self.diagnosticCallback) {\n                        return self.diagnosticCallback(diagnostic).then((answer) => {\n                            resolve(answer);\n                        }, (reason) => {\n                            reject(reason);\n                        });\n                    } else {\n                        return reject();\n                    }\n                });\n            }, {cache: true, priority: self.factPriority--});\n        }\n    }\n\n    private createRuleForSolution(symptom:Symptom, potential:PotentialSolution, solution:Solution):Rule {\n        const self = this;\n        const rule: any = {};\n        rule.name = symptom.name + ': ' + solution.name;\n        rule.event = {\n            type: 'solved',\n            params: {\n                symptomId: symptom.id,\n                solutionId: solution.id,\n                message: solution.name\n            }\n        }\n        this.addConditions(rule, symptom, potential);\n        if (solution.askDidItWork) {\n            rule.conditions.all.push({fact: solution.id, operator: 'equal', value: 'yes'});\n            // @ts-ignore\n            this.engine.addFact(solution.id, function (params, almanac) {\n                return new Promise<any>((resolve, reject) => {\n                    if (self.solutionCallback) {\n                        return self.solutionCallback(solution).then((answer) => {\n                            resolve(answer);\n                        }, (reason) => {\n                            reject(reason);\n                        });\n                    }\n                    else {\n                        return reject();\n                    }\n                });\n            }, {cache: false, priority: self.factPriority--});\n        }\n        return new Rule(rule);\n    }\n\n    private createRuleForRootCause(symptom:Symptom, potential:PotentialRootCause, root:Symptom):Rule {\n        const rule: any = {};\n        rule.name = symptom.name + ': ' + root.name;\n        rule.event = {\n            type: 'addSymptom',\n            params: {\n                symptomId: symptom.id,\n                causeId: root.id,\n                message: root.name\n            }\n        }\n        this.addConditions(rule, symptom, potential);\n        return new Rule(rule);\n    }\n\n    private addConditions (rule:any, symptom:Symptom, potential:PotentialRootCause|PotentialSolution):void {\n        const self = this;\n        rule.conditions = {\n            all: [\n                {\n                    fact: 'symptoms',\n                    operator: 'contains',\n                    value: symptom.id\n                }\n            ]\n        };\n        if (potential.systemTypes && potential.systemTypes.length) {\n            rule.conditions.all.push(\n                {\n                    fact: 'systemTypes',\n                    operator: 'containsOneOf',\n                    value: potential.systemTypes\n                });\n        }\n        if (potential.mustBeYes) {\n            potential.mustBeYes.forEach((diagnosticId) => {\n                rule.conditions.all.push(\n                    {\n                        fact: diagnosticId,\n                        operator: 'equal',\n                        value: 'yes'\n                    });\n                self.createFact(diagnosticId);\n            });\n        }\n        potential.mustBeNo && potential.mustBeNo.forEach((diagnosticId) => {\n            rule.conditions.all.push(\n                {\n                    fact: diagnosticId,\n                    operator: 'equal',\n                    value: 'no'\n                });\n            self.createFact(diagnosticId);\n        });\n    }\n\n    private addRules (rules:Rule[] = []):void {\n        let priority = rules.length + 1;\n        rules.forEach((rule) => {\n            rule.setPriority(priority--);\n            this.engine.addRule(rule);\n        });\n    }\n\n    public getEngine ():Engine {\n        return this.engine;\n    }\n\n}\n\nexport {\n    DiagnosticEngine,\n    Engine,\n    Rule,\n    Fact,\n    Almanac,\n    RuleResult,\n    Diagnostic,\n    Solution,\n    Symptom\n}"],"names":["DiagnosticEngine","constructor","engine","Engine","allowUndefinedFacts","initialize","symptoms","solutions","diagnostics","diagnosticCallback","solutionCallback","forEach","solution","id","diagnostic","parse","initialized","run","systemTypes","addFact","on","event","console","log","e","self","addOperator","factValue","jsonValue","length","contains","val","includes","symptom","rules","potential","solutionId","rule","createRuleForSolution","push","rootCauses","cause","root","find","s","symptomId","createRuleForRootCause","addRules","createFact","factId","factCreated","params","almanac","Promise","resolve","reject","then","answer","reason","cache","priority","factPriority","name","type","message","addConditions","askDidItWork","conditions","all","fact","operator","value","Rule","causeId","mustBeYes","diagnosticId","mustBeNo","setPriority","addRule","getEngine"],"mappings":"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"}