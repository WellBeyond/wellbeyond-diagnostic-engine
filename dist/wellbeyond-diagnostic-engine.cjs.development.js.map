{"version":3,"file":"wellbeyond-diagnostic-engine.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["// @ts-ignore\nimport { Engine, Rule, Fact, Almanac, RuleResult, Event, EngineResult } from 'json-rules-engine';\nimport {Diagnostic, Solution, Symptom, PotentialSolution, PotentialRootCause} from \"./types\";\n\nexport type DiagnosticCallback = {\n    (diagnostic:Diagnostic): Promise<string|number>;\n}\n\nexport type SolutionCallback = {\n    (solution:Solution): Promise<string>;\n}\n\nclass DiagnosticEngine {\n    private readonly engine: Engine;\n    private symptoms: Symptom[] = [];\n    private solutions: {\n        [solutionId:string]: Solution\n    } = {};\n    private diagnostics: {\n        [diagnosticId:string]: Diagnostic\n    } = {};\n    private factCreated: {\n        [diagnosticId:string]: boolean\n    } = {};\n    private currentSymptoms: string[] = [];\n    private rules: Rule[] = [];\n    private diagnosticCallback?:DiagnosticCallback;\n    private solutionCallback?:SolutionCallback;\n    private factPriority:number = 1000;\n    public initialized = false;\n\n    public constructor () {\n        this.engine = new Engine([], {allowUndefinedFacts: false});\n    }\n\n    public initialize (symptoms:Symptom[], solutions:Solution[], diagnostics:Diagnostic[],\n                        diagnosticCallback:DiagnosticCallback, solutionCallback:SolutionCallback): DiagnosticEngine {\n        this.symptoms = symptoms || [];\n        solutions.forEach((solution) => {\n            this.solutions[solution.id] = solution;\n        });\n        diagnostics.forEach((diagnostic) => {\n            this.diagnostics[diagnostic.id] = diagnostic;\n        });\n        this.diagnosticCallback = diagnosticCallback;\n        this.solutionCallback = solutionCallback;\n        this.parse();\n        this.initialized = true;\n        return this;\n    }\n\n    public async run(symptoms:string[], systemTypes:string[]): Promise<EngineResult> {\n        const self = this;\n        self.currentSymptoms = symptoms;\n        self.engine.addFact('symptoms', (_params, _almanac) => {\n            return self.currentSymptoms;\n        }, { cache: false, priority: 99999 });\n        self.engine.addFact('systemTypes', systemTypes, { cache: true, priority: 99999 });\n\n        self.engine\n            .on('solved', (event:any) => {\n                console.log('solved', event);\n                if (event.symptomId) {\n                    const index = self.currentSymptoms.indexOf(event.symptomId);\n                    if (index > -1) {\n                        self.currentSymptoms.splice(index, 1);\n                    }\n                }\n            })\n            .on('addSymptom', (event:any) => {\n                console.log('addSymptom', event);\n                if (event.symptomId) {\n                    const index = self.currentSymptoms.indexOf(event.symptomId);\n                    if (index == -1) {\n                        self.currentSymptoms.push(event.symptomId);\n                    }\n                }\n            })\n            .on('success', event => {\n                console.log('success', event);\n            })\n            .on('failure', event => {\n                console.log('failure', event);\n            });\n\n        return this.engine.run();\n\n    }\n\n    private parse ():void {\n        const self = this;\n        self.engine.addOperator('containsOneOf', (factValue:string[], jsonValue:string[]) => {\n            if (!factValue || !factValue.length) return false;\n            if (!jsonValue || !jsonValue.length) return false;\n            let contains:boolean = false;\n            jsonValue.forEach(val => {\n                if (factValue.includes(val)) contains = true;\n            });\n            return contains;\n        })\n        self.symptoms.forEach((symptom) => {\n            symptom.rules && symptom.rules.forEach((potential) => {\n                const solution = this.solutions[potential.solutionId];\n                if (solution) {\n                    const rule = this.createRuleForSolution(symptom, potential, solution);\n                    this.rules.push(rule);\n                }\n            });\n            symptom.rootCauses && symptom.rootCauses.forEach((cause) => {\n                const root = this.symptoms.find(s => s.id === cause.symptomId);\n                if (root) {\n                    const rule = this.createRuleForRootCause(symptom, cause, root);\n                    this.rules.push(rule);\n                }\n            });\n        });\n        self.addRules(self.rules);\n    }\n\n    private createDiagnosticFact(factId:string) {\n        const self = this;\n        if (factId && !self.factCreated[factId]) {\n            self.factCreated[factId] = true;\n            // @ts-ignore\n            this.engine.addFact(factId, function (params, almanac) {\n                return new Promise<any>((resolve, reject) => {\n                    const diagnostic = self.diagnostics[factId];\n                    console.log('Asking question ...', diagnostic);\n                    if (diagnostic && self.diagnosticCallback) {\n                        return self.diagnosticCallback(diagnostic).then((answer) => {\n                            resolve(answer);\n                        }, (reason) => {\n                            reject(reason);\n                        });\n                    } else {\n                        return reject();\n                    }\n                });\n            }, {cache: true, priority: self.factPriority--});\n        }\n    }\n\n    private createRuleForSolution(symptom:Symptom, potential:PotentialSolution, solution:Solution):Rule {\n        const self = this;\n        const rule: any = {};\n        rule.name = symptom.name + ': ' + solution.name;\n        rule.event = {\n            type: 'solved',\n            params: {\n                symptomId: symptom.id,\n                solutionId: solution.id,\n                message: solution.name\n            }\n        }\n        this.addConditions(rule, symptom, potential);\n        if (solution.askDidItWork) {\n            rule.conditions.all.push({fact: solution.id, operator: 'equal', value: 'yes'});\n            // @ts-ignore\n            this.engine.addFact(solution.id, function (params, almanac) {\n                return new Promise<any>((resolve, reject) => {\n                    if (self.solutionCallback) {\n                        console.log('Checking to see if this worked...', solution);\n                        return self.solutionCallback(solution).then((answer) => {\n                            resolve(answer);\n                        }, (reason) => {\n                            reject(reason);\n                        });\n                    }\n                    else {\n                        return reject();\n                    }\n                });\n            }, {cache: false, priority: self.factPriority--});\n        }\n        return new Rule(rule);\n    }\n\n    private createRuleForRootCause(symptom:Symptom, potential:PotentialRootCause, root:Symptom):Rule {\n        const rule: any = {};\n        rule.name = symptom.name + ': ' + root.name;\n        rule.event = {\n            type: 'addSymptom',\n            params: {\n                symptomId: symptom.id,\n                causeId: root.id,\n                message: root.name\n            }\n        }\n        this.addConditions(rule, symptom, potential);\n        return new Rule(rule);\n    }\n\n    private addConditions (rule:any, symptom:Symptom, potential:PotentialRootCause|PotentialSolution):void {\n        const self = this;\n        rule.conditions = {\n            all: [\n                {\n                    fact: 'symptoms',\n                    operator: 'contains',\n                    value: symptom.id\n                }\n            ]\n        };\n        if (potential.systemTypes && potential.systemTypes.length) {\n            rule.conditions.all.push(\n                {\n                    fact: 'systemTypes',\n                    operator: 'containsOneOf',\n                    value: potential.systemTypes\n                });\n        }\n        if (potential.mustBeYes) {\n            potential.mustBeYes.forEach((diagnosticId) => {\n                rule.conditions.all.push(\n                    {\n                        fact: diagnosticId,\n                        operator: 'equal',\n                        value: 'yes'\n                    });\n                self.createDiagnosticFact(diagnosticId);\n            });\n        }\n        potential.mustBeNo && potential.mustBeNo.forEach((diagnosticId) => {\n            rule.conditions.all.push(\n                {\n                    fact: diagnosticId,\n                    operator: 'equal',\n                    value: 'no'\n                });\n            self.createDiagnosticFact(diagnosticId);\n        });\n    }\n\n    private addRules (rules:Rule[] = []):void {\n        let priority = rules.length + 1;\n        rules.forEach((rule) => {\n            rule.setPriority(priority--);\n            this.engine.addRule(rule);\n        });\n    }\n\n    public getEngine ():Engine {\n        return this.engine;\n    }\n\n}\n\nexport {\n    DiagnosticEngine,\n    EngineResult,\n    Engine,\n    Rule,\n    Fact,\n    Almanac,\n    RuleResult,\n    Diagnostic,\n    Solution,\n    Symptom\n}"],"names":["DiagnosticEngine","constructor","engine","Engine","allowUndefinedFacts","initialize","symptoms","solutions","diagnostics","diagnosticCallback","solutionCallback","forEach","solution","id","diagnostic","parse","initialized","run","systemTypes","self","currentSymptoms","addFact","_params","_almanac","cache","priority","on","event","console","log","symptomId","index","indexOf","splice","push","addOperator","factValue","jsonValue","length","contains","val","includes","symptom","rules","potential","solutionId","rule","createRuleForSolution","rootCauses","cause","root","find","s","createRuleForRootCause","addRules","createDiagnosticFact","factId","factCreated","params","almanac","Promise","resolve","reject","then","answer","reason","factPriority","name","type","message","addConditions","askDidItWork","conditions","all","fact","operator","value","Rule","causeId","mustBeYes","diagnosticId","mustBeNo","setPriority","addRule","getEngine"],"mappings":"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"}