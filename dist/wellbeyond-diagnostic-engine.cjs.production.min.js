"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("json-rules-engine");Object.defineProperty(exports,"Almanac",{enumerable:!0,get:function(){return e.Almanac}}),Object.defineProperty(exports,"Engine",{enumerable:!0,get:function(){return e.Engine}}),Object.defineProperty(exports,"Fact",{enumerable:!0,get:function(){return e.Fact}}),Object.defineProperty(exports,"Rule",{enumerable:!0,get:function(){return e.Rule}}),exports.DiagnosticEngine=class{constructor(){this.symptoms=[],this.solutions={},this.diagnostics={},this.factCreated={},this.currentSymptoms=[],this.rules=[],this.factPriority=1e3,this.initialized=!1,this.engine=new e.Engine([],{allowUndefinedFacts:!1})}initialize(e,t,s,n,o){return this.symptoms=e||[],t.forEach(e=>{this.solutions[e.id]=e}),s.forEach(e=>{this.diagnostics[e.id]=e}),this.diagnosticCallback=n,this.solutionCallback=o,this.parse(),this.initialized=!0,this}async run(e,t){const s=this;return s.currentSymptoms=e,s.engine.addFact("symptoms",(e,t)=>s.currentSymptoms,{cache:!1,priority:99999}),s.engine.addFact("systemTypes",t,{cache:!0,priority:99999}),s.engine.on("solved",e=>{if(console.log("solved",e),e.symptomId){const t=s.currentSymptoms.indexOf(e.symptomId);t>-1&&s.currentSymptoms.splice(t,1)}}).on("addSymptom",e=>{console.log("addSymptom",e),e.symptomId&&-1==s.currentSymptoms.indexOf(e.symptomId)&&s.currentSymptoms.push(e.symptomId)}).on("success",e=>{console.log("success",e)}).on("failure",e=>{console.log("failure",e)}),this.engine.run()}parse(){this.engine.addOperator("containsOneOf",(e,t)=>{if(!e||!e.length)return!1;if(!t||!t.length)return!1;let s=!1;return t.forEach(t=>{e.includes(t)&&(s=!0)}),s}),this.symptoms.forEach(e=>{e.rules&&e.rules.forEach(t=>{const s=this.solutions[t.solutionId];if(s){const n=this.createRuleForSolution(e,t,s);this.rules.push(n)}}),e.rootCauses&&e.rootCauses.forEach(t=>{const s=this.symptoms.find(e=>e.id===t.symptomId);if(s){const n=this.createRuleForRootCause(e,t,s);this.rules.push(n)}})}),this.addRules(this.rules)}createDiagnosticFact(e){const t=this;e&&!t.factCreated[e]&&(t.factCreated[e]=!0,this.engine.addFact(e,(function(s,n){return new Promise((s,n)=>{const o=t.diagnostics[e];return console.log("Asking question ...",o),o&&t.diagnosticCallback?t.diagnosticCallback(o).then(e=>{s(e)},e=>{n(e)}):n()})}),{cache:!0,priority:t.factPriority--}))}createRuleForSolution(t,s,n){const o=this,i={};return i.name=t.name+": "+n.name,i.event={type:"solved",params:{symptomId:t.id,solutionId:n.id,message:n.name}},this.addConditions(i,t,s),n.askDidItWork&&(i.conditions.all.push({fact:n.id,operator:"equal",value:"yes"}),this.engine.addFact(n.id,(function(e,t){return new Promise((e,t)=>o.solutionCallback?(console.log("Checking to see if this worked...",n),o.solutionCallback(n).then(t=>{e(t)},e=>{t(e)})):t())}),{cache:!1,priority:o.factPriority--})),new e.Rule(i)}createRuleForRootCause(t,s,n){const o={};return o.name=t.name+": "+n.name,o.event={type:"addSymptom",params:{symptomId:t.id,causeId:n.id,message:n.name}},this.addConditions(o,t,s),new e.Rule(o)}addConditions(e,t,s){const n=this;e.conditions={all:[{fact:"symptoms",operator:"contains",value:t.id}]},s.systemTypes&&s.systemTypes.length&&e.conditions.all.push({fact:"systemTypes",operator:"containsOneOf",value:s.systemTypes}),s.mustBeYes&&s.mustBeYes.forEach(t=>{e.conditions.all.push({fact:t,operator:"equal",value:"yes"}),n.createDiagnosticFact(t)}),s.mustBeNo&&s.mustBeNo.forEach(t=>{e.conditions.all.push({fact:t,operator:"equal",value:"no"}),n.createDiagnosticFact(t)})}addRules(e=[]){let t=e.length+1;e.forEach(e=>{e.setPriority(t--),this.engine.addRule(e)})}getEngine(){return this.engine}};
//# sourceMappingURL=wellbeyond-diagnostic-engine.cjs.production.min.js.map
