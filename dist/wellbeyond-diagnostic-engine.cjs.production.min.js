"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("json-rules-engine");Object.defineProperty(exports,"Almanac",{enumerable:!0,get:function(){return e.Almanac}}),Object.defineProperty(exports,"Engine",{enumerable:!0,get:function(){return e.Engine}}),Object.defineProperty(exports,"Fact",{enumerable:!0,get:function(){return e.Fact}}),Object.defineProperty(exports,"Rule",{enumerable:!0,get:function(){return e.Rule}}),exports.DiagnosticEngine=class{constructor(){this.symptoms=[],this.solutions={},this.diagnostics={},this.factCreated={},this.rules=[],this.factPriority=1e3,this.initialized=!1,this.engine=new e.Engine([],{allowUndefinedFacts:!1})}initialize(e,t,s,i,n){return this.symptoms=e||[],t.forEach(e=>{this.solutions[e.id]=e}),s.forEach(e=>{this.diagnostics[e.id]=e}),this.diagnosticCallback=i,this.solutionCallback=n,this.parse(),this.initialized=!0,this}async run(e,t){this.engine.addFact("symptoms",e),this.engine.addFact("systemTypes",t),this.engine.on("success",e=>{console.log("success",e)}).on("failure",e=>{console.log("failure",e)});try{await this.engine.run()}catch(e){console.log(e)}}parse(){this.engine.addOperator("containsOneOf",(e,t)=>{if(!e||!e.length)return!1;if(!t||!t.length)return!1;let s=!1;return t.forEach(t=>{e.includes(t)&&(s=!0)}),s}),this.symptoms.forEach(e=>{e.rules&&e.rules.forEach(t=>{const s=this.solutions[t.solutionId];if(s){const i=this.createRuleForSolution(e,t,s);this.rules.push(i)}}),e.rootCauses&&e.rootCauses.forEach(t=>{const s=this.symptoms.find(e=>e.id===t.symptomId);if(s){const i=this.createRuleForRootCause(e,t,s);this.rules.push(i)}})}),this.addRules(this.rules)}createFact(e){const t=this;e&&!t.factCreated[e]&&(t.factCreated[e]=!0,this.engine.addFact(e,(function(s,i){return new Promise((s,i)=>{const n=t.diagnostics[e];return n&&t.diagnosticCallback?t.diagnosticCallback(n).then(e=>{s(e)},e=>{i(e)}):i()})}),{cache:!0,priority:t.factPriority--}))}createRuleForSolution(t,s,i){const n=this,o={};return o.name=t.name+": "+i.name,o.event={type:"solved",params:{symptomId:t.id,solutionId:i.id,message:i.name}},this.addConditions(o,t,s),i.askDidItWork&&(o.conditions.all.push({fact:i.id,operator:"equal",value:"yes"}),this.engine.addFact(i.id,(function(e,t){return new Promise((e,t)=>n.solutionCallback?n.solutionCallback(i).then(t=>{e(t)},e=>{t(e)}):t())}),{cache:!1,priority:n.factPriority--})),new e.Rule(o)}createRuleForRootCause(t,s,i){const n={};return n.name=t.name+": "+i.name,n.event={type:"addSymptom",params:{symptomId:t.id,causeId:i.id,message:i.name}},this.addConditions(n,t,s),new e.Rule(n)}addConditions(e,t,s){const i=this;e.conditions={all:[{fact:"symptoms",operator:"contains",value:t.id}]},s.systemTypes&&s.systemTypes.length&&e.conditions.all.push({fact:"systemTypes",operator:"containsOneOf",value:s.systemTypes}),s.mustBeYes&&s.mustBeYes.forEach(t=>{e.conditions.all.push({fact:t,operator:"equal",value:"yes"}),i.createFact(t)}),s.mustBeNo&&s.mustBeNo.forEach(t=>{e.conditions.all.push({fact:t,operator:"equal",value:"no"}),i.createFact(t)})}addRules(e=[]){let t=e.length+1;e.forEach(e=>{e.setPriority(t--),this.engine.addRule(e)})}getEngine(){return this.engine}};
//# sourceMappingURL=wellbeyond-diagnostic-engine.cjs.production.min.js.map
