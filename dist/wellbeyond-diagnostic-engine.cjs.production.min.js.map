{"version":3,"file":"wellbeyond-diagnostic-engine.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["// @ts-ignore\nimport { Engine, Rule, Fact, Almanac, RuleResult, Event, EngineResult } from 'json-rules-engine';\nimport {Diagnostic, Solution, Symptom, PotentialSolution, PotentialRootCause} from \"./types\";\n\nexport type DiagnosticCallback = {\n    (diagnostic:Diagnostic): Promise<string|number>;\n}\n\nexport type SolutionCallback = {\n    (solution:Solution): Promise<string>;\n}\n\nclass DiagnosticEngine {\n    private readonly engine: Engine;\n    private symptoms: Symptom[] = [];\n    private solutions: {\n        [solutionId:string]: Solution\n    } = {};\n    private diagnostics: {\n        [diagnosticId:string]: Diagnostic\n    } = {};\n    private factCreated: {\n        [diagnosticId:string]: boolean\n    } = {};\n    private currentSymptoms: string[] = [];\n    private rules: Rule[] = [];\n    private diagnosticCallback?:DiagnosticCallback;\n    private solutionCallback?:SolutionCallback;\n    private factPriority:number = 1000;\n    public initialized = false;\n\n    public constructor () {\n        this.engine = new Engine([], {allowUndefinedFacts: false});\n    }\n\n    public initialize (symptoms:Symptom[], solutions:Solution[], diagnostics:Diagnostic[],\n                        diagnosticCallback:DiagnosticCallback, solutionCallback:SolutionCallback): DiagnosticEngine {\n        this.symptoms = symptoms || [];\n        solutions.forEach((solution) => {\n            this.solutions[solution.id] = solution;\n        });\n        diagnostics.forEach((diagnostic) => {\n            this.diagnostics[diagnostic.id] = diagnostic;\n        });\n        this.diagnosticCallback = diagnosticCallback;\n        this.solutionCallback = solutionCallback;\n        this.parse();\n        this.initialized = true;\n        return this;\n    }\n\n    public async run(symptoms:string[], systemTypes:string[]): Promise<EngineResult> {\n        const self = this;\n        self.currentSymptoms = symptoms;\n        self.engine.addFact('symptoms', (_params, _almanac) => {\n            return self.currentSymptoms;\n        }, { cache: false, priority: 99999 });\n        self.engine.addFact('systemTypes', systemTypes, { cache: true, priority: 99999 });\n\n        self.engine\n            .on('solved', (event:any) => {\n                console.log('solved', event);\n                if (event.symptomId) {\n                    const index = self.currentSymptoms.indexOf(event.symptomId);\n                    if (index > -1) {\n                        self.currentSymptoms.splice(index, 1);\n                    }\n                }\n            })\n            .on('addSymptom', (event:any) => {\n                console.log('addSymptom', event);\n                if (event.causeId) {\n                    const index = self.currentSymptoms.indexOf(event.causeId);\n                    if (index == -1) {\n                        self.currentSymptoms.push(event.causeId);\n                    }\n                }\n            })\n            .on('success', event => {\n                console.log('success', event);\n            })\n            .on('failure', event => {\n                console.log('failure', event);\n            });\n\n        return this.engine.run();\n\n    }\n\n    private parse ():void {\n        const self = this;\n        self.engine.addOperator('containsOneOf', (factValue:string[], jsonValue:string[]) => {\n            if (!factValue || !factValue.length) return false;\n            if (!jsonValue || !jsonValue.length) return false;\n            let contains:boolean = false;\n            jsonValue.forEach(val => {\n                if (factValue.includes(val)) contains = true;\n            });\n            return contains;\n        })\n        self.symptoms.forEach((symptom) => {\n            symptom.rules && symptom.rules.forEach((potential) => {\n                const solution = this.solutions[potential.solutionId];\n                if (solution) {\n                    const rule = this.createRuleForSolution(symptom, potential, solution);\n                    this.rules.push(rule);\n                }\n            });\n            symptom.rootCauses && symptom.rootCauses.forEach((cause) => {\n                const root = this.symptoms.find(s => s.id === cause.symptomId);\n                if (root) {\n                    const rule = this.createRuleForRootCause(symptom, cause, root);\n                    this.rules.push(rule);\n                }\n            });\n        });\n        self.addRules(self.rules);\n    }\n\n    private createDiagnosticFact(factId:string) {\n        const self = this;\n        if (factId && !self.factCreated[factId]) {\n            self.factCreated[factId] = true;\n            // @ts-ignore\n            this.engine.addFact(factId, function (params, almanac) {\n                return new Promise<any>((resolve, reject) => {\n                    const diagnostic = self.diagnostics[factId];\n                    console.log('Asking question ...', diagnostic);\n                    if (diagnostic && self.diagnosticCallback) {\n                        return self.diagnosticCallback(diagnostic).then((answer) => {\n                            resolve(answer);\n                        }, (reason) => {\n                            reject(reason);\n                        });\n                    } else {\n                        return reject();\n                    }\n                });\n            }, {cache: true, priority: self.factPriority--});\n        }\n    }\n\n    private createRuleForSolution(symptom:Symptom, potential:PotentialSolution, solution:Solution):Rule {\n        const self = this;\n        const rule: any = {};\n        rule.name = symptom.name + ': ' + solution.name;\n        rule.event = {\n            type: solution.askDidItWork ? 'solved' : 'deferred',\n            params: {\n                symptomId: symptom.id,\n                solutionId: solution.id,\n                message: solution.name\n            }\n        }\n        this.addConditions(rule, symptom, potential);\n        rule.conditions.all.push({fact: solution.id, operator: 'equal', value: 'yes'});\n        // @ts-ignore\n        this.engine.addFact(solution.id, function (params, almanac) {\n            return new Promise<any>((resolve, reject) => {\n                if (self.solutionCallback) {\n                    console.log('Checking to see if this worked...', solution);\n                    return self.solutionCallback(solution).then((answer) => {\n                        resolve(answer);\n                    }, (reason) => {\n                        reject(reason);\n                    });\n                }\n                else {\n                    return reject();\n                }\n            });\n        }, {cache: false, priority: self.factPriority--});\n        return new Rule(rule);\n    }\n\n    private createRuleForRootCause(symptom:Symptom, potential:PotentialRootCause, root:Symptom):Rule {\n        const rule: any = {};\n        rule.name = symptom.name + ': ' + root.name;\n        rule.event = {\n            type: 'addSymptom',\n            params: {\n                symptomId: symptom.id,\n                causeId: root.id,\n                message: root.name\n            }\n        }\n        this.addConditions(rule, symptom, potential);\n        return new Rule(rule);\n    }\n\n    private addConditions (rule:any, symptom:Symptom, potential:PotentialRootCause|PotentialSolution):void {\n        const self = this;\n        rule.conditions = {\n            all: [\n                {\n                    fact: 'symptoms',\n                    operator: 'contains',\n                    value: symptom.id\n                }\n            ]\n        };\n        if (potential.systemTypes && potential.systemTypes.length) {\n            rule.conditions.all.push(\n                {\n                    fact: 'systemTypes',\n                    operator: 'containsOneOf',\n                    value: potential.systemTypes\n                });\n        }\n        if (potential.mustBeYes) {\n            potential.mustBeYes.forEach((diagnosticId) => {\n                rule.conditions.all.push(\n                    {\n                        fact: diagnosticId,\n                        operator: 'equal',\n                        value: 'yes'\n                    });\n                self.createDiagnosticFact(diagnosticId);\n            });\n        }\n        potential.mustBeNo && potential.mustBeNo.forEach((diagnosticId) => {\n            rule.conditions.all.push(\n                {\n                    fact: diagnosticId,\n                    operator: 'equal',\n                    value: 'no'\n                });\n            self.createDiagnosticFact(diagnosticId);\n        });\n    }\n\n    private addRules (rules:Rule[] = []):void {\n        let priority = rules.length + 1;\n        rules.forEach((rule) => {\n            rule.setPriority(priority--);\n            this.engine.addRule(rule);\n        });\n    }\n\n    public getEngine ():Engine {\n        return this.engine;\n    }\n\n}\n\nexport {\n    DiagnosticEngine,\n    EngineResult,\n    Engine,\n    Rule,\n    Fact,\n    Almanac,\n    RuleResult,\n    Diagnostic,\n    Solution,\n    Symptom\n}"],"names":["constructor","engine","Engine","allowUndefinedFacts","initialize","symptoms","solutions","diagnostics","diagnosticCallback","solutionCallback","forEach","solution","id","diagnostic","parse","initialized","this","systemTypes","self","currentSymptoms","addFact","_params","_almanac","cache","priority","on","event","console","log","symptomId","index","indexOf","splice","causeId","push","run","addOperator","factValue","jsonValue","length","contains","val","includes","symptom","rules","potential","solutionId","rule","createRuleForSolution","rootCauses","cause","root","find","s","createRuleForRootCause","addRules","createDiagnosticFact","factId","factCreated","params","almanac","Promise","resolve","reject","then","answer","reason","factPriority","name","type","askDidItWork","message","addConditions","conditions","all","fact","operator","value","Rule","mustBeYes","diagnosticId","mustBeNo","setPriority","addRule","getEngine"],"mappings":"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"}