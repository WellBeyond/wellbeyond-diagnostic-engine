{"version":3,"file":"wellbeyond-diagnostic-engine.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["// @ts-ignore\nimport { Engine, Rule, Fact, Almanac, RuleResult, Event } from 'json-rules-engine';\nimport {Diagnostic, Solution, Symptom, PotentialSolution, PotentialRootCause} from \"./types\";\n\nexport type DiagnosticCallback = {\n    (diagnostic:Diagnostic): Promise<string|number>;\n}\n\nexport type SolutionCallback = {\n    (solution:Solution): Promise<string>;\n}\n\nclass DiagnosticEngine {\n    private readonly engine: Engine;\n    private symptoms: Symptom[] = [];\n    private solutions: {\n        [solutionId:string]: Solution\n    } = {};\n    private diagnostics: {\n        [diagnosticId:string]: Diagnostic\n    } = {};\n    private factCreated: {\n        [diagnosticId:string]: boolean\n    } = {};\n    private rules: Rule[] = [];\n    private diagnosticCallback?:DiagnosticCallback;\n    private solutionCallback?:SolutionCallback;\n    private factPriority:number = 1000;\n    public initialized = false;\n\n    public constructor () {\n        this.engine = new Engine([], {allowUndefinedFacts: false});\n    }\n\n    public initialize (symptoms:Symptom[], solutions:Solution[], diagnostics:Diagnostic[],\n                        diagnosticCallback:DiagnosticCallback, solutionCallback:SolutionCallback): DiagnosticEngine {\n        this.symptoms = symptoms || [];\n        solutions.forEach((solution) => {\n            this.solutions[solution.id] = solution;\n        });\n        diagnostics.forEach((diagnostic) => {\n            this.diagnostics[diagnostic.id] = diagnostic;\n        });\n        this.diagnosticCallback = diagnosticCallback;\n        this.solutionCallback = solutionCallback;\n        this.parse();\n        this.initialized = true;\n        return this;\n    }\n\n    public async run(symptoms:string[], systemTypes:string[]): Promise<void> {\n        this.engine.addFact('symptoms', symptoms);\n        this.engine.addFact('systemTypes', systemTypes);\n\n        this.engine\n            .on('success', event => {\n                console.log('success', event)\n            })\n            .on('failure', event => {\n                console.log('failure', event)\n            });\n\n        try {\n            await this.engine.run();\n        }\n        catch (e) {\n            console.log(e);\n        }\n\n    }\n\n    private parse ():void {\n        const self = this;\n        self.engine.addOperator('containsOneOf', (factValue:string[], jsonValue:string[]) => {\n            if (!factValue || !factValue.length) return false;\n            if (!jsonValue || !jsonValue.length) return false;\n            let contains:boolean = false;\n            jsonValue.forEach(val => {\n                if (factValue.includes(val)) contains = true;\n            });\n            return contains;\n        })\n        self.symptoms.forEach((symptom) => {\n            symptom.rules && symptom.rules.forEach((potential) => {\n                const solution = this.solutions[potential.solutionId];\n                if (solution) {\n                    const rule = this.createRuleForSolution(symptom, potential, solution);\n                    this.rules.push(rule);\n                }\n            });\n            symptom.rootCauses && symptom.rootCauses.forEach((cause) => {\n                const root = this.symptoms.find(s => s.id === cause.symptomId);\n                if (root) {\n                    const rule = this.createRuleForRootCause(symptom, cause, root);\n                    this.rules.push(rule);\n                }\n            });\n        });\n        self.addRules(self.rules);\n    }\n\n    private createFact(factId:string) {\n        const self = this;\n        if (factId && !self.factCreated[factId]) {\n            self.factCreated[factId] = true;\n            // @ts-ignore\n            this.engine.addFact(factId, function (params, almanac) {\n                return new Promise<any>((resolve, reject) => {\n                    const diagnostic = self.diagnostics[factId];\n                    if (diagnostic && self.diagnosticCallback) {\n                        return self.diagnosticCallback(diagnostic).then((answer) => {\n                            resolve(answer);\n                        }, (reason) => {\n                            reject(reason);\n                        });\n                    } else {\n                        return reject();\n                    }\n                });\n            }, {cache: true, priority: self.factPriority--});\n        }\n    }\n\n    private createRuleForSolution(symptom:Symptom, potential:PotentialSolution, solution:Solution):Rule {\n        const self = this;\n        const rule: any = {};\n        rule.name = symptom.name + ': ' + solution.name;\n        rule.event = {\n            type: 'solved',\n            params: {\n                symptomId: symptom.id,\n                solutionId: solution.id,\n                message: solution.name\n            }\n        }\n        this.addConditions(rule, symptom, potential);\n        if (solution.askDidItWork) {\n            rule.conditions.all.push({fact: solution.id, operator: 'equal', value: 'yes'});\n            // @ts-ignore\n            this.engine.addFact(solution.id, function (params, almanac) {\n                return new Promise<any>((resolve, reject) => {\n                    if (self.solutionCallback) {\n                        return self.solutionCallback(solution).then((answer) => {\n                            resolve(answer);\n                        }, (reason) => {\n                            reject(reason);\n                        });\n                    }\n                    else {\n                        return reject();\n                    }\n                });\n            }, {cache: false, priority: self.factPriority--});\n        }\n        return new Rule(rule);\n    }\n\n    private createRuleForRootCause(symptom:Symptom, potential:PotentialRootCause, root:Symptom):Rule {\n        const rule: any = {};\n        rule.name = symptom.name + ': ' + root.name;\n        rule.event = {\n            type: 'addSymptom',\n            params: {\n                symptomId: symptom.id,\n                causeId: root.id,\n                message: root.name\n            }\n        }\n        this.addConditions(rule, symptom, potential);\n        return new Rule(rule);\n    }\n\n    private addConditions (rule:any, symptom:Symptom, potential:PotentialRootCause|PotentialSolution):void {\n        const self = this;\n        rule.conditions = {\n            all: [\n                {\n                    fact: 'symptoms',\n                    operator: 'contains',\n                    value: symptom.id\n                }\n            ]\n        };\n        if (potential.systemTypes && potential.systemTypes.length) {\n            rule.conditions.all.push(\n                {\n                    fact: 'systemTypes',\n                    operator: 'containsOneOf',\n                    value: potential.systemTypes\n                });\n        }\n        if (potential.mustBeYes) {\n            potential.mustBeYes.forEach((diagnosticId) => {\n                rule.conditions.all.push(\n                    {\n                        fact: diagnosticId,\n                        operator: 'equal',\n                        value: 'yes'\n                    });\n                self.createFact(diagnosticId);\n            });\n        }\n        potential.mustBeNo && potential.mustBeNo.forEach((diagnosticId) => {\n            rule.conditions.all.push(\n                {\n                    fact: diagnosticId,\n                    operator: 'equal',\n                    value: 'no'\n                });\n            self.createFact(diagnosticId);\n        });\n    }\n\n    private addRules (rules:Rule[] = []):void {\n        let priority = rules.length + 1;\n        rules.forEach((rule) => {\n            rule.setPriority(priority--);\n            this.engine.addRule(rule);\n        });\n    }\n\n    public getEngine ():Engine {\n        return this.engine;\n    }\n\n}\n\nexport {\n    DiagnosticEngine,\n    Engine,\n    Rule,\n    Fact,\n    Almanac,\n    RuleResult,\n    Diagnostic,\n    Solution,\n    Symptom\n}"],"names":["constructor","engine","Engine","allowUndefinedFacts","initialize","symptoms","solutions","diagnostics","diagnosticCallback","solutionCallback","forEach","solution","id","diagnostic","parse","initialized","this","systemTypes","addFact","on","event","console","log","run","e","addOperator","factValue","jsonValue","length","contains","val","includes","symptom","rules","potential","solutionId","rule","createRuleForSolution","push","rootCauses","cause","root","find","s","symptomId","createRuleForRootCause","addRules","createFact","factId","self","factCreated","params","almanac","Promise","resolve","reject","then","answer","reason","cache","priority","factPriority","name","type","message","addConditions","askDidItWork","conditions","all","fact","operator","value","Rule","causeId","mustBeYes","diagnosticId","mustBeNo","setPriority","addRule","getEngine"],"mappings":"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"}