{"version":3,"file":"wellbeyond-diagnostic-engine.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["// @ts-ignore\nimport { Engine, Rule, Fact, Almanac, RuleResult, Event } from 'json-rules-engine';\nimport {Diagnostic, Solution, Symptom, PotentialSolution, PotentialRootCause} from \"./types\";\n\nexport type DiagnosticCallback = {\n    (diagnostic:Diagnostic): Promise<string|number>;\n}\n\nexport type SolutionCallback = {\n    (solution:Solution): Promise<string>;\n}\n\nclass DiagnosticEngine {\n    private readonly engine: Engine;\n    private symptoms: Symptom[] = [];\n    private solutions: {\n        [solutionId:string]: Solution\n    } = {};\n    private diagnostics: {\n        [diagnosticId:string]: Diagnostic\n    } = {};\n    private factCreated: {\n        [diagnosticId:string]: boolean\n    } = {};\n    private rules: Rule[] = [];\n    private diagnosticCallback?:DiagnosticCallback;\n    private solutionCallback?:SolutionCallback;\n    private factPriority:number = 1000;\n    public initialized = false;\n\n    public constructor () {\n        this.engine = new Engine([], {allowUndefinedFacts: false});\n    }\n\n    public initialize (symptoms:Symptom[], solutions:Solution[], diagnostics:Diagnostic[],\n                        diagnosticCallback:DiagnosticCallback, solutionCallback:SolutionCallback): DiagnosticEngine {\n        this.symptoms = symptoms || [];\n        solutions.forEach((solution) => {\n            this.solutions[solution.id] = solution;\n        });\n        diagnostics.forEach((diagnostic) => {\n            this.diagnostics[diagnostic.id] = diagnostic;\n        });\n        this.diagnosticCallback = diagnosticCallback;\n        this.solutionCallback = solutionCallback;\n        this.parse();\n        this.initialized = true;\n        return this;\n    }\n\n    public async run(symptoms:string[], systemTypes:string[]): Promise<void> {\n        this.engine.addFact('symptoms', symptoms, { cache: true, priority: 99999 });\n        this.engine.addFact('systemTypes', systemTypes, { cache: true, priority: 99999 });\n\n        this.engine\n            .on('success', event => {\n                console.log('success', event)\n            })\n            .on('failure', event => {\n                console.log('failure', event)\n            });\n\n        try {\n            await this.engine.run();\n        }\n        catch (e) {\n            console.log(e);\n        }\n\n    }\n\n    private parse ():void {\n        const self = this;\n        self.engine.addOperator('containsOneOf', (factValue:string[], jsonValue:string[]) => {\n            if (!factValue || !factValue.length) return false;\n            if (!jsonValue || !jsonValue.length) return false;\n            let contains:boolean = false;\n            jsonValue.forEach(val => {\n                if (factValue.includes(val)) contains = true;\n            });\n            return contains;\n        })\n        self.symptoms.forEach((symptom) => {\n            symptom.rules && symptom.rules.forEach((potential) => {\n                const solution = this.solutions[potential.solutionId];\n                if (solution) {\n                    const rule = this.createRuleForSolution(symptom, potential, solution);\n                    this.rules.push(rule);\n                }\n            });\n            symptom.rootCauses && symptom.rootCauses.forEach((cause) => {\n                const root = this.symptoms.find(s => s.id === cause.symptomId);\n                if (root) {\n                    const rule = this.createRuleForRootCause(symptom, cause, root);\n                    this.rules.push(rule);\n                }\n            });\n        });\n        self.addRules(self.rules);\n    }\n\n    private createFact(factId:string) {\n        const self = this;\n        if (factId && !self.factCreated[factId]) {\n            self.factCreated[factId] = true;\n            // @ts-ignore\n            this.engine.addFact(factId, function (params, almanac) {\n                return new Promise<any>((resolve, reject) => {\n                    const diagnostic = self.diagnostics[factId];\n                    console.log('Asking question ...', diagnostic);\n                    if (diagnostic && self.diagnosticCallback) {\n                        return self.diagnosticCallback(diagnostic).then((answer) => {\n                            resolve(answer);\n                        }, (reason) => {\n                            reject(reason);\n                        });\n                    } else {\n                        return reject();\n                    }\n                });\n            }, {cache: true, priority: self.factPriority--});\n        }\n    }\n\n    private createRuleForSolution(symptom:Symptom, potential:PotentialSolution, solution:Solution):Rule {\n        const self = this;\n        const rule: any = {};\n        rule.name = symptom.name + ': ' + solution.name;\n        rule.event = {\n            type: 'solved',\n            params: {\n                symptomId: symptom.id,\n                solutionId: solution.id,\n                message: solution.name\n            }\n        }\n        this.addConditions(rule, symptom, potential);\n        if (solution.askDidItWork) {\n            rule.conditions.all.push({fact: solution.id, operator: 'equal', value: 'yes'});\n            // @ts-ignore\n            this.engine.addFact(solution.id, function (params, almanac) {\n                return new Promise<any>((resolve, reject) => {\n                    if (self.solutionCallback) {\n                        console.log('Checking to see if this worked...', solution);\n                        return self.solutionCallback(solution).then((answer) => {\n                            resolve(answer);\n                        }, (reason) => {\n                            reject(reason);\n                        });\n                    }\n                    else {\n                        return reject();\n                    }\n                });\n            }, {cache: false, priority: self.factPriority--});\n        }\n        return new Rule(rule);\n    }\n\n    private createRuleForRootCause(symptom:Symptom, potential:PotentialRootCause, root:Symptom):Rule {\n        const rule: any = {};\n        rule.name = symptom.name + ': ' + root.name;\n        rule.event = {\n            type: 'addSymptom',\n            params: {\n                symptomId: symptom.id,\n                causeId: root.id,\n                message: root.name\n            }\n        }\n        this.addConditions(rule, symptom, potential);\n        return new Rule(rule);\n    }\n\n    private addConditions (rule:any, symptom:Symptom, potential:PotentialRootCause|PotentialSolution):void {\n        const self = this;\n        rule.conditions = {\n            all: [\n                {\n                    fact: 'symptoms',\n                    operator: 'contains',\n                    value: symptom.id\n                }\n            ]\n        };\n        if (potential.systemTypes && potential.systemTypes.length) {\n            rule.conditions.all.push(\n                {\n                    fact: 'systemTypes',\n                    operator: 'containsOneOf',\n                    value: potential.systemTypes\n                });\n        }\n        if (potential.mustBeYes) {\n            potential.mustBeYes.forEach((diagnosticId) => {\n                rule.conditions.all.push(\n                    {\n                        fact: diagnosticId,\n                        operator: 'equal',\n                        value: 'yes'\n                    });\n                self.createFact(diagnosticId);\n            });\n        }\n        potential.mustBeNo && potential.mustBeNo.forEach((diagnosticId) => {\n            rule.conditions.all.push(\n                {\n                    fact: diagnosticId,\n                    operator: 'equal',\n                    value: 'no'\n                });\n            self.createFact(diagnosticId);\n        });\n    }\n\n    private addRules (rules:Rule[] = []):void {\n        let priority = rules.length + 1;\n        rules.forEach((rule) => {\n            rule.setPriority(priority--);\n            this.engine.addRule(rule);\n        });\n    }\n\n    public getEngine ():Engine {\n        return this.engine;\n    }\n\n}\n\nexport {\n    DiagnosticEngine,\n    Engine,\n    Rule,\n    Fact,\n    Almanac,\n    RuleResult,\n    Diagnostic,\n    Solution,\n    Symptom\n}"],"names":["constructor","engine","Engine","allowUndefinedFacts","initialize","symptoms","solutions","diagnostics","diagnosticCallback","solutionCallback","forEach","solution","id","diagnostic","parse","initialized","this","systemTypes","addFact","cache","priority","on","event","console","log","run","e","addOperator","factValue","jsonValue","length","contains","val","includes","symptom","rules","potential","solutionId","rule","createRuleForSolution","push","rootCauses","cause","root","find","s","symptomId","createRuleForRootCause","addRules","createFact","factId","self","factCreated","params","almanac","Promise","resolve","reject","then","answer","reason","factPriority","name","type","message","addConditions","askDidItWork","conditions","all","fact","operator","value","Rule","causeId","mustBeYes","diagnosticId","mustBeNo","setPriority","addRule","getEngine"],"mappings":"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"}